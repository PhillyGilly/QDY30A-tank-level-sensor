esphome:
  name: esphome-web-38ec5d
  friendly_name: Wemos Mini D1 - Water Level Sensor
  min_version: 2024.11.0
  name_add_mac_suffix: false

esp8266:
  board: esp01_1m #Pinout: WemosMini1D.jpg

# Enable logging  
logger:
  level: DEBUG #VERY_VERBOSE
  baud_rate: 0

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap: {}

captive_portal:

web_server:

time:
  - platform: homeassistant
    id: homeassistant_time

uart:
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 9600
  data_bits: 8
  stop_bits: 1
  parity: NONE
  #debug:

modbus:
#  flow_control_pin: GPIO2
  id: modbus1
#  disable_crc: true

modbus_controller:
- id: modbus_device
  address: 0x01   ## address of the Modbus slave device on the bus
  modbus_id: modbus1
  setup_priority: -10
  update_interval: 5s

sensor:
# Reports how long the device has been powered (in minutes)
  - platform: uptime
    name: Uptime
    filters:
      - lambda: return x / 60.0;
    unit_of_measurement: minutes
 
  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Pressure Unit number"
    id: modbus_pressure_unit_number
    register_type: holding
    address: 0x0002
    #unit_of_measurement: 
    value_type: S_WORD

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Decimal Points"
    id: modbus_decimal_points
    register_type: holding
    address: 0x0003
    #unit_of_measurement: mm
    value_type: S_WORD
    
  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Water level"
    id: modbus_water_level
    register_type: holding
    address: 0x0004
    #unit_of_measurement: mm
    value_type: S_WORD

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Transmitter zero"
    id: modbus_tx_zero
    register_type: holding
    address: 0x0005
    #unit_of_measurement: mm
    value_type: S_WORD

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Transmitter Range"
    id: modbus_tx_range
    register_type: holding
    address: 0x0006
    #unit_of_measurement: mm
    value_type: S_WORD

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Pressure Unit"
    id: modbus_pressure_unit
    address: 0x0002
    register_type: holding
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t local_var = modbus_controller::word_from_hex_str(x, 0);
      //ESP_LOGI("mprowe", "The value of local_var is: %d", local_var);
      local_var = local_var >> 2;
      //ESP_LOGI("mprowe", "local_var right shift 2 is: %d", local_var);
      local_var = local_var & 0x03;
      //ESP_LOGI("mprowe", "local_var & 0x03 is: %d", local_var);
      switch (local_var) {
        case 0: return std::string("not shown");
        case 1: return std::string("cm");
        case 2: return std::string("mm");
        case 3: return std::string("MPa");
        case 4: return std::string("Pa");
        case 5: return std::string("kPa");
        case 6: return std::string("MA");
        default: return std::string("Unknown");
      }